/* ================================================================= 
 * DESCRIPTION: Strong primes generation using modified Gordon's method
 *     CREATED: 2010 Nov 24
 *      AUTHOR: Zoresvit                     zoresvit@gmail.com
 *              Kharkiv National University of Radioelectronics
 * =================================================================
 */

/*!
 * Generate prime number of given bit length
 */
void genPrime(mpz_t prime, size_t length, gmp_randstate_t randstate);

/*!
 * Generate strong prime that satisfies all conditions of strong prime properties
 * @param   prime   gmp variable to store generated prime
 * @param   length  bit length of prime number to generate 
 * @param   rand_state  random state for gmp library. Needed for generating new random numbers each call
 */
void genStrongPrime(mpz_t prime, size_t length, gmp_randstate_t rand_state);

/*!
 * Generate prime number of two lower level primes.
 * Prime level is defined in article by C.S. Laih, W.C. Yang, C.H. Chen 
 * "Efficient method for generating strong primes with constraint of bit length"
 * @param   prime   gmp variable to store generated prime
 * @param   length  bit length of strong prime number to generate 
 * @param   rand_state  random state for gmp library. Needed for generating new random numbers each call
 */
void gen2LevelPrime(mpz_t prime, size_t length, gmp_randstate_t rand_state);

/*!
 * Generate prime number of two lower level primes.
 * @param   prime   gmp variable to store generated prime
 * @param   r   level 3 random prime generated by regular Miller-Rabin test
 * @param   s   level 3 random prime generated by regular Miller-Rabin test
 * @param   length  bit length of strong prime number to generate 
 * @param   rand_state  random state for gmp library. Needed for generating new random numbers each call
 */
void genNextLevelPrime(mpz_t prime, mpz_t r, mpz_t s, size_t length, gmp_randstate_t rand_state);

/*!
 * Find the inverse element modulo mod.
 * @param   inverse gmp variable to store the inverse element
 * @param   n   number to finde the inverse element of
 * @param   mod reduction modulo
 */
void inverse(mpz_t inverse, mpz_t n, mpz_t mod);

/*!
 * Find the length of lower level primes needed to construct new prime
 * @param   length length of needed prime
 * @return  length of lower level primes needed to construct new prime
 */
size_t findSubLength(size_t length);
